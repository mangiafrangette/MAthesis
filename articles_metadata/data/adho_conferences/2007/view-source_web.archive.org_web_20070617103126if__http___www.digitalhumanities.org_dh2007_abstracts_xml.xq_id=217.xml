<?xml version="1.0" encoding="UTF-8"?>
<TEI.2 id="paper_217_huitfeldt"><teiHeader><fileDesc><titleStmt><title>Preserving Information About Linearization in Document Graphs</title><author><name reg="Johnsen, Lars G.">Lars G. Johnsen</name></author><author><name reg="Huitfeldt, Claus">Claus Huitfeldt</name></author><respStmt><resp>Marked up by</resp><name reg="Schmidt, Sara A.">Sara A. Schmidt</name></respStmt></titleStmt><publicationStmt><p>Marked up to be included in the Digital Humanities 2007 Conference Abstracts
                    book.</p></publicationStmt><sourceDesc><p>None</p></sourceDesc></fileDesc><profileDesc><textClass><classCode>paper</classCode><keywords><list type="simple"><item>linearization</item><item>graph</item><item>XML</item><item>Goddag</item><item>DOM</item></list></keywords></textClass></profileDesc><revisionDesc><list type="simple"><item>SAS: Created from Claus Huitfeldt's pdf<date value="2007-04">April and May
                        2007</date></item></list></revisionDesc></teiHeader><text><front><docTitle n="Preserving Information About Linearization in Document Graphs"><titlePart type="main">Preserving Information About Linearization in Document
                Graphs</titlePart></docTitle><docAuthor><name reg="Johnsen, Lars G.">Lars G. Johnsen</name><address><addrLine>lars.johnsen@lili.uib.no</addrLine></address></docAuthor><titlePart type="affil">University of Bergen</titlePart><docAuthor><name reg="Huitfeldt, Claus">Claus Huitfeldt</name><address><addrLine>Claus.Huitfeldt@fil.uib.no</addrLine></address></docAuthor><titlePart type="affil">University of Bergen</titlePart></front><body><div0><p>Many operations are more conveniently performed on a graph representation than on
                    a linear representation of a marked up document, and vice versa. Therefore, it
                    is sometimes important to ensure that no relevant aspect of the information
                    contained in a document represented in one of these forms is lost or distorted when the document is converted to the other form.</p><p>Conventional methods for converting between XML documents and their graph
                    representations [W3C 2000] are typically seen to preserve such information;
                    standards and methods have been established for ensuring what is in most
                    contexts considered full preservation of all relevant aspects of the
                    linearization [W3C 2001].</p><p>However, what is considered relevant may of course vary, depending on context of
                    use. It would probably be hard to find serious arguments to the effect that
                    literally all aspects of the linear representation of a document are relevant
                    for any generally interesting use. Typically, conventional conversion methods
                    are not guaranteed to preserve e.g. attribute order, declaration order, and
                    insignificant whitespace. But it is not hard to find complaints about, for
                    example, lack of preservation of attribute order in certain applications.</p><p>Our focus in this paper is on methods for the preservation of element
                    serialization order in marked up documents which make use of mechanisms for
                    representing non- hierarchic complex structures such as overlapping,
                    discontinuous and virtual elements. (For convenience, we use the term "complex
                    structures" to refer to such phenomena.) We do not wish to claim that
                    preservation of element order is always or even generally relevant, our aim is
                    limited to providing a method for such preservation in cases where it is
                    considered relevant.</p><p>The customary graph representation of XML is in the form of an "XML tree", a
                    restricted kind of directed acyclic graph (DAG). More specifically, XML trees
                    are DAGs with single parenthood and total ordering on leaf nodes. For certain
                    purposes, however, a different kind of graph representation has been proposed,
                    the so-called Goddag [Sperberg-McQueen and Huitfeldt 2000]: Roughly, Goddags are
                    like XML trees except that they allow multiple parenthood and do not require a
                    total ordering on leaf nodes; leaf nodes may be ordered only relative to their
                    immediate parents. (Thus, XML trees constitute a subset of Goddags.)</p><p>For certain purposes this data structure provides a more convenient
                    representation of complex structures than XML trees. Documents using different
                    XML mechanisms for representing such structures in linear form (e.g. milestones,
                    fragmentation, virtual elements etc. [Barnard et.al. 1995, Sperberg-McQueen and
                    Huitfeldt 1999]) can be mapped on to Goddags, though not without knowledge of
                    application-specific semantics of the markup vocabulary. The experimental markup
                    system TexMecs [Sperberg-McQueen and Huitfeldt 2001] offers mechanisms for the
                    representation of complex structures which can be mapped on to Goddags
                    independently of such knowledge.</p><p>However, in both cases, i.e. whether the graph is built from XML or TexMecs,
                    reserialization from the graph is not in general guaranteed possible without
                    changes to the structure and order of elements in the original linearization.
                    For example, if an XML document has used milestones or fragmentation of elements
                    to represent overlapping elements it is possible to build a Goddag representing
                    the non-hierarchic structure of the document. But when reserializing back to
                    XML, the Goddag does not contain any information about which elements to
                    represent as milestones or as fragmented elements.</p><p>Similarly with TexMecs: Some element structures can be represented by alternative
                    serialization constructs, and the Goddag as currently defined does not preserve
                    information about the choice of construct in each particular case. In TexMecs
                    the problem is made more severe by the fact that the graph does not, in the case
                    of e.g. virtual or discontinuous elements, preserve complete information about
                    the serial orderof elements in the original input.</p><p>Consider the following example, marked up according to TexMECS, and illustrating
                    how a discontinuous constituent element <hi rend="code">&lt;q&gt;</hi>
                    may be represented. </p><lg><l>(1)     <hi rend="code">  &lt;s|&lt;q|Why|-q&gt;, he said,&lt;+q|
                        me?|q&gt;|s&gt; </hi></l></lg><p>In TEI-based XML, the example could e.g. be marked up as:</p><lg><l>(1’)     <hi rend="code">  &lt;s&gt;&lt;q
                        part="I"&gt;Why&lt;q/&gt;, he said,&lt;q part="F"&gt;
                        me?&lt;/q&gt;&lt;/s&gt;</hi></l></lg><p>The resulting Goddag, whether based on the XML or the TexMecs input, would
                    normally look like this:<note n="1">For simplification, we are consciously
                        ignoring certain unresolved issues concerning the representation of
                        discontinuous elements in Goddags [Huitfeldt and Sperberg-McQueen
                    2006].</note></p><figure rend="ImageLink"><head>(2)</head><p><xref to="DITTO" from="ROOT" targOrder="U">paper_217_huitfeldt_1.jpg</xref></p><figDesc/></figure><p>Since the second leaf node (containing the string ", he said,") does not share
                    any parent with either of the two other leaf nodes, it is not ordered with
                    respect to these. Therefore, the linearization in (1) is equivalent to the
                    following two linearizations, both placing the second leaf node in a position
                    relative to the other two that it does not have in (1):</p><lg><l>(3)     <hi rend="code">  &lt;s|&lt;q|Why me?|q&gt;, he said,|s&gt;
                    </hi></l><lb/><l>(4)     <hi rend="code">  &lt;s|, he said,&lt;q|Why me?|q&gt;|s&gt;
                    </hi></l></lg><p>Thus, the Goddag in (2) would be the same whether built from (1), (3) or (4).
                    Similarly, a choice whether to linearize (2) in the form of (1), (3) or (4) will
                    either have to be arbitrary, or based on purely practical considerations.</p><p>A solution to the linearization problem lies, we propose, in considering the
                    Goddag used for representing marked up text as a path ordered directed acyclic
                    graph; a Podagra. Building a Podagra from (1), we get a graph consisting of
                    three paths, in the order indicated as follows:<note n="2">The simplicity of the
                        example allows us to indicate nodes by their generic identifiers. I.e. the
                        three occurrences of "s" all indicate the single node labelled s, and the
                        two occurrences of "q" indicate the single node labelled "q".</note></p><lg><l>(5)</l><l>1.  s → q → "Why"</l><l>2.  s → ", he said,"</l><l>3.  s → q → " me?"</l></lg><p>Building a Podagra from (3), however, produces the following path order:</p><lg><l>(6)</l><l>1.  s → q → "Why me?"</l><l>2.  s → ", he said,"</l></lg><p>whereas from (4) we get the following paths:</p><lg><l>(7)</l><l>1.  s → ", he said,"</l><l>2.  s → q → "Why me?"</l></lg><p>The Podagras (5), (6) and (7) all correspond to the Goddag (2), but each maps uniquely 
                    to the linearizations (1), (3) and (4), respectively.</p><p>In the full paper, we will present an algorithm yielding Podagras from TexMECS 
                    documents containing different linearizations also of overlapping and virtual elements. 
                    We intend to show how path ordered Goddags can faithfully restore the original 
                    linearization of such documents.</p><p>Since TexMECS is a purely experimental markup language, these results may be said to 
                    have limited practical relevance. However, a number of projects currently build Goddags 
                    from XML-encoded documents (by the use of application-specific semantics). Therefore, 
                    we also hope to indicate how the proposed method may used for preservation of the 
                    original linearization of XML documents using well-known methods for representation of 
                    overlapping, discontinuous and virtual elements.</p></div0></body><back><div type="Bibliography"><head>Bibliography</head><listBibl><biblStruct><analytic><author><name reg="Barnard, David">David Barnard</name></author><author><name reg="Burnard, Lou">Lou Burnard</name></author><author><name reg="Gaspart, Jean-Pierre">Jean-Pierre Gaspart</name></author><author><name reg="Price, Lynne A."/>Lynne A. Price</author><author><name reg="Sperberg-McQueen, C. Michael">C. Michael Sperberg-McQueen</name></author><author><name reg="Varile, Giovanni Battista">Giovanni Battista Varile</name></author><title level="a">Hierarchical Encoding of Text: Technical 
                                Problems and SGML Solutions</title></analytic><monogr><editor role="editor"><name reg="Ide, Nancy">Nancy Ide</name></editor><editor role="editor"><name reg="Véronis, Jean">Jean Véronis</name></editor><title level="m">The Text Encoding Initiative: Background and Contents</title><imprint><date value="1995">1995</date><biblScope type="pages">211-231</biblScope></imprint></monogr></biblStruct><biblStruct><analytic><author><name reg="Huitfeldt, Claus">Claus Huitfeldt</name></author><author><name reg="Sperberg-McQueen, C. M.">C. M. Sperberg-McQueen</name></author><title level="a">Representation and Processing of 
                                Goddag Structures: Implementation Strategies and Progress Report</title></analytic><monogr><title level="m">Proceedings of Extreme Markup Languages 2006</title><imprint><date value="2006">2006</date></imprint></monogr><note><xptr to="http://www.idealliance.org/papers/extreme/proceedings/" from="ROOT" targOrder="U"/></note></biblStruct><biblStruct><analytic><author><name reg="Sperberg-McQueen, C. M.">C. M. Sperberg-McQueen</name></author><author><name reg="Huitfeldt, Claus">Claus Huitfeldt</name></author><title level="a">Concurrent Document Hierarchies in MECS and SGML</title></analytic><monogr><title level="j">Literary &amp; Linguistic Computing</title><imprint><biblScope type="vol">14.1</biblScope><date value="1999">1999</date><biblScope type="pages">29-42</biblScope></imprint></monogr></biblStruct><biblStruct><analytic><author><name reg="Sperberg-McQueen, C. M.">C. M. Sperberg-McQueen</name></author><author><name reg="Huitfeldt, Claus">Claus Huitfeldt</name></author><title level="a">GODDAG: A Data Structure for Overlapping Hierarchies</title></analytic><monogr><editor role="editor"><name reg="King, P.">P. King</name></editor><editor role="editor"><name reg="Munson, E. V.">E. V. Munson</name></editor><title level="m">DDEP-PODDP 2000</title><title level="s">Lecture Notes in Computer Science 2023</title><imprint><pubPlace>Berlin</pubPlace><publisher>Springer</publisher><date value="2004">2004</date><biblScope type="pages">139-160</biblScope></imprint></monogr></biblStruct><biblStruct><analytic><author><name reg="Sperberg-McQueen, C. M.">C. M. Sperberg-McQueen</name></author><author><name reg="Huitfeldt, Claus">Claus Huitfeldt</name></author><title level="a">TexMECS: An Experimental Markup Meta-language for Complex Documents</title></analytic><monogr><imprint><date value="2001">2001</date></imprint></monogr><note><xptr to="http://decentius.aksis.uib.no/mlcd/2003/Papers/texmecs.html" from="ROOT" targOrder="U"/></note></biblStruct><biblStruct><monogr><author><name reg="W3C">W3C</name></author><title level="m">Document Object Model (DOM) Level 1 Specification</title><imprint><publisher>The World Wide Web Consortium</publisher><date value="2000">2000</date></imprint></monogr><note><xptr to="http://www.w3.org/TR/REC-DOM-Level-1" from="ROOT" targOrder="U"/></note><note>W3C Recommendation, September 2000</note></biblStruct><biblStruct><monogr><author><name reg="W3C">W3C</name></author><editor role="editor"><name reg=" Boyer, J.">J. Boyer</name></editor><title level="m">Canonical XML</title><imprint><date value="2001">2001</date></imprint></monogr><note>W3C Recommendation, March 2001</note></biblStruct></listBibl></div></back></text></TEI.2>