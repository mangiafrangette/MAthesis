What makes the best technology for "presentations" is a delicate and politically sensitive question. It even receives occasional attention in the media, as schools adopt presentations technologies and as commentators debate their merits. Recently (May 2003) it has gotten special scrutiny from the guru of visual information design, Edward Tufte 1, who has written a diatribe directed specifically at Microsoft PowerPoint but largely applicable to presentations software in general: The Cognitive Style of PowerPoint [Tufte 2003]. 2 This reaction comes only when entire worlds (and not just in the academy, but in government, business, and primary/secondary education as well) have seemingly come to be dominated by PowerPoint; more even than other computer media, presentations packages seem to promise easy "dazzle" a seduction we can all recognize. But as its users know (and as Tufte details), Powerpoint comes with its weaknesses and shortcomings as well as its strengths. These include not only features of its design, but in externals as well, such as its cost and its closed data format. There exist several options if one wants to forsake Powerpoint or one of its analogues (Corel WordPerfect Presentations, the new Keynote for the Macintosh, etc.) for sequences of HTML pages, which (especially with the help of CSS) can also make perfectly respectable "slides" for presentation; this approach works at least as well as the proprietary packages, and sometimes better, especially when such pages are generated from a stronger authoring format, such as TEI or a custom tag set. 3 But an extremely tempting ultimately, it would seem, the ideal target format is not HTML (which does bullet points readily enough, but whose visual capabilities are limited) but SVG. Scalable Vector Graphics, a W3C Recommendation 4 is a general-purpose declarative tag set specifically designed for describing the rendition of vector graphics, which has already made an impact in both interactive viewers, and print; it is also well-suited for projection and classroom group-interactive work. Several XML to SVG presentations packages exist, the handiwork of various XML pioneers. A discursive series of lists of bullet points is actually a fairly challenging target for SVG, which is not designed to provide for typographic layout features such as line spacing or word wrapping. 5 Nonetheless, by means of various workarounds these problems can be dealt with, and these packages demonstrate how even rudimentary XML can be used effectively to get quite tasteful results [Mulberry 2002]. But if bullet points are what is wanted, HTML is better; SVG's main advantage is that as a native graphics format and, not incidentally, one specifically engineered to scale graphics it also has the potential to take us far, far beyond Powerpoint. Several attached screenshots and SVG files show how SVG can be applied to reinvent the application of "slideshow" or projection technologies to the classroom. These images and interfaces (since some of them have dynamic controls to be used in real time, and/or are "browsable") are assembled through a combination of routines in the form of an XSLT transformation, operating over source XML files, to create either a standalone SVG image, or a linked sequence of images, calling in libraries of jpegs and SVGs to include as components. 6 These are productions of a larger or looser library of XSLT routines (developed by the author) whose function is to automate the creation of SVG output from mixed text and image input. These XSLT templates constitute a set of primitives (think of it as a library of classes or subroutines), performing various functions such as drawing boxes, sequencing, lining up and arranging text, and so forth. These templates can then be called from others, assigned to match element types. An XML source document is provided with markup that is completely prospective, tied (like HTML but not like a "descriptive" tag set such as TEI) to a particular output format there is not even a DTD to validate against, only the processing stylesheet itself to run, and output to inspect but declarative, designed to minimize or eliminate manual labor and leave only those adjustments to be made that cannot be made by the machine unaided. One of these applications is being used in a professional context by Mr. Jim Surkamp, an associate of the author's, whose lectures on the United States Constitutional Convention of 1787 (presented at the US Government's Eastern Management Development Center 7) have provided a perfect occasion for the development and application of a truly dynamic classroom use. The aim here was to provide visuals which should be supporting players, not the center or "star" of the lecture. 8 Any projected visuals could be drawn in to provide context; but they should not have to encapsulate the presentation's content on the contrary, if we assume the lecturer knows his material, to repeat it on screen would be redundant at best, at worst an interference. In Surkamp's case, the hour and a half (or sometimes more, at the participants' demand) is conducted in a role-playing mode, with participants assuming the task of representing the interests of the different States at the Convention. Attention is focused not on Surkamp, nor even on the participants themselves, but on the issues faced by the Delegates of 1787. In this context, visuals must be supportive but subdued, working fluidly, not imposing a schedule or sequence; and they should degrade gracefully, allowing for tangents and distractions, or even for the presenter to set them aside and do completely without them. These goals were achieved by a single SVG image. 9 (A photograph of Mr Surkamp in front of the display appears below. That there is only a single image here used in a presentation that goes well into a second hour does not mean that it is simple or that little information is conveyed by it.) Scripting was added in order to provide pre-set zoom positions to show, in detail, a set of images that can be traversed as the presenter chooses. A simple "one-click" user interface allows the presenter to bring in or hide content, or zoom in and out, at will, using the dynamic capabilities of the digital medium to serve directly the purposes of focusing attention and capturing the viewers' imaginations rather than being merely gratuitous and distracting, like PowerPoint's "fly-ins". A great stress is placed on the detail of images that scale on the screen, so inset images may be scrutinized more closely than would be possible using the limited graphics support of typical presentations packages. Since authoring does not occur directly in SVG, but rather in a simplified custom XML tag set, which distills to its essence the problem of arranging and laying out the content, even an SVG amateur can create these (as is, in fact, the case here). The presenter then runs the source document (ahead of time, in a batch process) through a stylesheet that combines some of the library primitives described above with specialized code for this application. The SVG thus created is more like what comes out of a "mill", than anything hand-crafted. But this milling allows for artistic composition of elements at a higher level. The XML source thus serves as a metalanguage with respect to the SVG display, while being strictly "presentational" (though high-level and declarative) with respect to the content of the presentation. Its presentational aspect is justifiable when we reflect that its dependence on a particular implementation the stylesheet that goes with it is (far from being a limitation and a design flaw) part of the idea: this metalanguage is not a work of theory, but a practical application. Having developed and demonstrated this technology, the author has found it helpful himself for his presentations and lectures. 