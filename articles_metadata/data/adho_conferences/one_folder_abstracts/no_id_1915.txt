  In the discussion about the status of Digital Humanities (DH) as a scientific discipline, the question of theory formation is often raised. Confronted with the accusation of a lack of theory (Bauer 2011) and the call for “more theory” (Lauer 2013, 112)   The text passages of the German research quoted above are translated by the author of this submission. , an excessive theoretical debate can be observed (Gold 2012). On the one hand, due to the heterogeneity of their objects as well as their tasks, DH are positioned somewhat beyond theory formation (Winko/Köppe 2013, 328). On the other hand, theory is being temporally separated from DH (Hall 2012). The proclamation of an ‘end of theory’ heralds a post-theoretical era (Scheinfeldt 2012), while at the same time affirming a pre-theoretical status of DH (Boellstorff 2014, 105). Either way, DH paradoxically appear to lie before, after, besides, or beyond theory formation. Instead DH seem to focus on the “activities” (Flanders/Jannidis 2015, 3) or “doing research” (Kath et al. 2015, 31; Cecire 2011).   In the course of this shift towards digital practice, the development of prototypical software is becoming increasingly important (Ramsey/Rockwell 2012). Transferred from informatic software development, a software prototype reduces a future system complexity to certain subcomponents and exhibits them assuming a descriptive or prospective potential (Houde/Hill 1997; Mogensen 1992). Software prototypes are understood as methodically and theoretically modelled “digital artefacts” (Rockwell/Ramsey 2012). In addition to the functions of exploration, explanation and understanding already established in computer science, software prototypes are regarded in other discursive contexts as arguments (Ruecker/Galey 2010), provocation (Boer/Donovan 2012), mediators of performance and criticism (Drucker 2012). Ruecker/Galey even speak of “prototypes as theory” (2010, 1).  The premise of this presentation is that software prototypes seem not only to gain epistemic status, but also to address the need for still outstanding, or arguably obsolete, theory formation. This presentation will show to what extent software prototypes can be understood as a ‘proto-theory’ of DH. Thereby, the presentation not only puts forward the theory-building effects of a software prototype, but also argues that the software prototype is a unique form of theory design. With ‘proto-theory’ I propose a theoretical form that is constituted not in text, but in the form of the software prototype. So, the presentation is intended as a contribution to the attempts to re-measure the “humanities as a place of advanced theory formation” (Grizelj/Jahraus 2011, 9) and to explore the scope and limits of theory formation based on software prototypes. First, an understanding of the concepts of prototype and theory will be presented. Afterwards, the theoretical merit of the software prototype will be determined.   On the View of Identity and Difference – The Concept of the Prototype  While the notion of a software prototype is highly prevalent in recent DH research discourse, an examination of the concept of the prototype beyond an informatic comprehension is overdue.   Derived from the Greek  prototypon 'Urbild', the composite consists of ' proto the foremost, first, most significant' (Kluge 2011, 728) and ' typos stroke, impact (of gr.  typtein ' strike, shape) 'formative form', outline, shape, pattern' (Ritter 1998, 1587).   Two determinations of the prototype can be distinguished: From the perspective of cognitive psychology (Rosch 1975), the term prototype is introduced in its standard use as an abstract entity that represents the typical characteristics of an extensional category as the best example (Kleiber 1993, 117). The affiliation to a category is determined in relation to the prototype qua analytical quantification of characteristics. To be distinguished from this is a morphological determination of the prototype, as it represents Ludwig Wittgenstein’s family resemblance among others. Using the example of the term “game” Wittgenstein explains that not all “members of a family” (Wittgenstein 1945, 278) are united by a single common defining characteristic, but by “a complicated network of similarities that overlap and cross” (278).   Wittgenstein defines “family resemblance” as followed: “I cannot characterize these similarities better than by the word ‘family similarities’, because in this way the different similarities that exist between the members of a family overlap and cross: Growth, facial features, eye colour, gait, temperament, etc. etc. - And I will say: the ‘games’ form a family” (1945, 278).  Belonging to a category is established by similarity relationships.    Theories as approaches: Negotiating contingency and complexity The concept of theory as a mental viewing or scientific consideration refers to “explicit, elaborate, ordered, and logically consistent category systems that serve to describe, research and explain the facts of their respective object areas” (Nünning/Nünning 2010, 6). Theories address an experience of deficiency that is expressed in the difference between theory and world: “Theories are an effect of the inaccessibility of the world in such a way that they substitute and thus compensate for accessibility as theory” (Jahraus 2011, 28). Providing an approach to the phenomena, theories pursue management of contingency. Given a certain degree of abstraction of the theoretical statement, which “applies to several, possibly even all, individual phenomena of a certain type or provides a model for the phenomena” (Winko/Köppe 2013, 8), theories have explanatory and prognostic functions. Furthermore, the theory formation is subject to the assumption that the complexity of the manifold phenomena can be traced back to superordinate, general principles.   The term complexity is under-defined (Koschorke 2015, 2). In the humanities, Niklas Luhmann’s determination (1976) became particularly relevant: Complexity is “number and diversity of the relations that are possible according to the structure of the system between the elements are.” Recently, James D. Proctor and Brendon M. H. Larson (2005) have described complexity as “a placeholder (in a variety of disciplines) for the unknown.”   Theories enable a (supposed) reduction of complexity by unifying the perspective and creating communicable observation effects.   The distinction between totality and complexity, which plays a role especially in the discussions of German idealism, is also linked to this: The more heterogeneous experiences a theory can unite among itself and bring to a coherent understanding, the greater is the range of the theory. But this also goes hand in hand with the idea that totality takes precedence over complexity (Sandkaulen 2002, 370).   When it comes to literary studies, theories not only constitute a specific approach to the object of literature by reflecting “conditions of production and reception [...] as well as [...] constitution and [...] functions” (Winko/Köppe 2013, 7), but they also generate the object as an epistemic object of their observation in the first place.   Methods differ from theories in that they rather describe the way of proceeding in a target-oriented way. Theories can therefore provide a set of general (reading, generating hypotheses) and specific (deductive, dialectical) methods. Exemplary for hermeneutic theory is the hermeneutic circle or the system-theoretical re-entry for systems theory.  Moreover, theories represent a specific literary text genre (Culler 2011, 3). Since theories appear primarily in the form of written texts and therefore follow a linguistic logic, they are subject to a specific textuality that is constitutive, but not reducible, for the shaping of a theoretical knowledge (Saar 2013, 47).     On the theoretical merits of the software prototype Against the background of the outlined prototype concepts and the function of (literary) theories, the question now arises to what extent software prototypes can meet theoretical requirements. The development of prototype software is first preceded by a process of data modelling and the production of an ontology (Jannidis/Flanders 2015, 7). In the classification procedures for obtaining classes, properties, and relations ([Gruber 2009] cited Jannidis/Flanders 2015, 9), theoretical knowledge already sediments itself, such as the idea of the text or meaning. Beyond the theoretical pre-configuration, however, the difference between the experience of observing and being observed that is constitutive for theory reveals itself in the software prototype. The software prototype represents an approach that is communicated and experienced interactively. As a reduced and compressed model of a set of mostly methodical operations, the software prototype often fulfils the “synthetic and integrating performance of a [...] view” (Wirth 2013, 138). Individual facts or activities are linked, which then appear to be prototypical, i.e. formative and exemplary, as part of a larger coherent explanatory context. More precisely, the software prototype represents theory as a functional structure and thus assumes an exemplary function. It stands “not merely for something else, but prototypically and materially for something from which it itself [promises] to be a part separated only for demonstrative purposes” (Schaub 2011, 12).   Contrary to the thesis of Rockwell/Ramsey (2012) on “Thing Theory”, it is not about the concrete materialization of theory as an objective object that substitutes the textual form of theory.  For example, the abstracts of the DH Conference 2018 contain not only numerous ideas of software prototypes   See DH 2018, Mexico City Abstracts: There are 25 mentions of software prototypes, understood as prototypical software, on pages 51, 55, 67, 115, 130, 137, 141, 178, 238, 250, 253, 397, 451, 470, 481, 483, 505, 531, 534, 537, 542, 559, 570, 584, 592. , but also formulations on explicative and prognostic performance as well as a form of validation.   Examples of mentions of software prototypes with reference to the scope of epistemic achievements: “typical episodes in the domain of a rudimentary experience” (p. 307), “networks are illustrated” (p. 451), “reflect upon the next steps in the project, considering the implications it may have on the data schema” (p. 451), “making it worth simply trying it out rather than lengthy discussions about the value of proceeding”, “establishes confidence and commitment”, “Gaps in desired functionality immediately become clear through interaction” (p. 470).  The precarious epistemic situation shows itself oscillating between the notions of the software prototype as a figuration of evidence and as a temporalized and spatialized form manifesting theory. For the software prototype dissolves the sharp “distinction between the world of things and the world of signs” (Rautzenberg/Strätling 2013, 11). Rather, the boundaries merge smoothly, so that at the same time the “difference-theoretical foundation of theory” (Jahraus 2011, 36) is questioned in favour of an interactive experience.   In contrast to the textual theoretical form, the subject, which wants to gain access through theory, is apparently 'co-constituted' by the interactive orientation of the software prototype. This is followed by the question of subject constitution in textual and technical theoretical forms.   In addition to proving the theory-generating effects, the question arises as to the form in which the theoretical knowledge appears in the software prototype. The visual order of the software prototype in the form of a graphical user interface is not committed to the textual aesthetics of the linear. The (textual) systematicity is replaced by a topological and temporary unfolding of the theory. The software prototype seems not only to represent theoretical knowledge, but visuality and interactivity generate a surplus in which new knowledge emerges. This interferes with empirically proven and hypothetically speculative knowledge. If we now consider the plurality of software prototypes in DH research from a distanced perspective, the individual software prototypes can be regarded as members of a family in Wittgenstein’s sense. In this way, no systematic theoretical structure is created, but rather the dynamics of an open and expanding network.   Conclusions The discussion about the epistemic status of the software prototype not only questions the self-conception of DH as (supporting) science and as research infrastructure   The aspect of research infrastructure includes considerations about interdisciplinary team structures, project constellations as well as research funding and financing. One of the questions under discussion is why resources are used for the production of software prototypes. , but locates its growing body work on theory formation firmly back into the centre of the humanities. What does a contemporary literary theory look like that situates the individual facts in the context of digitality? ‘Proto-theory’ promises to be an answer that implies a fruitful starting point for follow-up research. The growing family of software prototypes in the DH, if understood as a theoretical form, need to be thoroughly considered, contextualized, and critiqued. The tasks for the DH community are therefore to experiment with the legitimation of different forms of theory, to discuss the differences and barriers between textual and technical forms of design, and thus to contemplate this hybrid network of theories.   