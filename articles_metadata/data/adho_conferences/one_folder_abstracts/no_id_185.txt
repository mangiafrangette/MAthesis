Web applications are becoming more sophisticated and offer a rich user experience that is similar to native client applications. Examples of these applications include Google maps and Flickr. Interactive applications in the humanities can use some of these same design patterns to improve the user experience. The asynchronous update pattern is evaluated in this paper. Asynchronous update allows web applications to update without a complete page reload and goes by the popular name of Ajax. “Traditional web applications essentially submit forms, completed by a user, to a web server. The web server responds by sending a new web page back. Because the server must submit a new page each time, applications run more slowly and awkwardly than their native counterparts. Ajax applications, on the other hand, can send requests to the web server to retrieve only the data that is needed - usually using SOAP or some other XML-based web services dialect. On the client, JavaScript processes the web server response. The result is a more responsive interface, since the amount of data interchanged between the web browser and web server is vastly reduced. Web server processing time is also saved, since much of it is done on the client.” (from http://en.wikipedia.org/wiki/AJAX) This paper presents a case study of an ongoing project to create a digital library of Navajo language texts. After such texts are put into the database, the texts can be annotated with interlinear linguistic information using an interactive web application. The model for interlinear information that exists in TEI was determined to be inadequate for the present application and a different model is used. The design of the application for interactive and collaborative entry of interlinear linguistic information consists of a browser client using JavaScript and a server-side Exist native XML database that responds to XQueries. The acquisition and parsing methods for the texts are described in Canfield 2005. The Navajo language texts with annotated interlinear information are compliant with a Relaxng schema based on the XML from Bow 2003. Since this is a pilot application, it allows the schema to be tested and perhaps modified before finally adding the schema to TEI using an ODD specification. For example, the interlinear XML for the sentence “t’11’1ko [a’ sisi[“ is: <phrase> <item type=”txt”>t’11’1ko [a’ sisi[</item> <item type=”gls”>then one grabbed me</item> <words> <word> <item type=”txt”>t’11’1ko</item> <item type=”gls”>just then</item> <item type=”pos”>adv</item> </word> <word> <item type=”txt”>[a’</item> <item type=”gls”>one</item> <item type=”pos”>pro</item> </word> <word> <item type=”txt”>sisi[</item> <item type=”gls”>3p grabbed me</item> <item type=”pos”>verb</item> <morphemes> <morph> <item type=”txt”>shi</item> <item type=”gls”>me</item> <item type=”pos”>1st person obj </item> </morph> <morph> <item type=”txt”>yii</item> <item type=”gls”>he/she/it</item> <item type=”pos”>3p subj pro</item> </morph> <morph> <item type=”txt”>NULL</item> <item type=”pos”>classifier</item> </morph> <morph> <item type=”txt”>zi[</item> <item type=”gls”>grab</item> <item type=”root”>ZIID(1)</item> </morph> </morphemes> </word> </words> </phrase> All the XML in the database is transformed to XHTML for the user interface of the application. This page uses a tabular interface to allow the user to see and update the interlinear information for each sentence in the text. For example, if a word has already been annotated, it will appear with all the annotated information. If the word has not been annotated, the user double clicks on the word and the word appears in an editable html text input box. The user can then edit the detailed interlinear information for the text informed by an on-line Navajo lexicon. The display for each sentence appears as below, but the font for Navajo is not active so the characters display as the base ASCII. The sentence is « t’11’1ko [a’ sisi[ « which means «then one grabbed me.» All fields can be edited when double-clicked except for the base word in each sentence. Note that the last word is a verb «sisi[» and each underlying morpheme is annotated. t’11’1ko [a’ sisi[ t’11’1ko gls=just then pos=adverb [a’ gls=one pos=pronoun sisi[ gls=3rd person grabbed me pos=verb shiyiiNULLzi[mehe/she/itgrab1st person object3rd person subject pronounclassifierstem root=ZIID(1) gls= then one grabbed me DH The JavaScript code that updates each of the fields uses XML HTTP Request which allows the page to be updated without a page reload. Note that traditional web applications must reload the entire page for each update. This is time consuming and disruptive to the user experience. A sample of 25 chapter-length documents was used for this evaluation from the Navajo language digital library. The average document size was about 150kb, which is not very large for documents common in humanities applications. Each document update was timed (using JavaScript) in each mode - with asynchronous requests and with traditional page reloads. The average time for an update of a single field using XML HTTP Request was about 8 ms. The average time for a traditional (whole page reload) update of a field was about 400 ms. The traditional method shows a large update time that will cause unneeded user waiting. The traditional method also makes for a disruptive user experience where the page visually reloads while the user is trying to accomplish a task. Many interactive web applications in the humanities would benefit from this asynchronous update design pattern. Whenever a document is large and requires many small updates, the user experience will be improved with asynchronous requests due to shorter load times and a smoother experience with the user interface.