{"url": null, "identifier": {"string_id": null, "id_scheme": null}, "abstract": "   In this paper we present a hypermedia design and production methodology integrating markup languages and object-oriented techniques. This methodology tries to solve the main problems presented during hypermedia development, improving the communication between customers (content providers and interaction designers), and developers (software designers and programmers).   1. Introduction Hypermedia production is a complex and costly task with a specific need to involve experts of very different fields during all the phases of the software development. Usually in traditional software production, the customer gives the functional and operational requisites to developers, who in a very independent way implement the program. On the contrary, in hypermedia production we need more implication of the customer providing all the information needed to build the application. We have learned all these lessons during the construction of Galatea, an educational hypermedia for French text comprehension, developed in collaboration with a linguists team (complementary information about Galatea can be found in [Fernandez-Manjon et al. 98]). This customer presence, providing contents and interaction, originates a severe problem in the design phase. In this phase we need a systematic and well-defined formalism to represent the application in an abstract way that facilitates the relationship between customers and software designers. Two main approaches have been used to solve this problem. One solution is the use of hypermedia models in the design and development of these applications. The other one is to use object-oriented diagrams to cover the design phase. In this paper we analyze both approaches [Navarro 98], and propose a production hypermedia methodology integrating hypermedia models and object-oriented techniques. Our methodology [Navarro&Fernandez-Manjon 00, Navarro&Sierra 00] tries to solve some of the problems identified in previous approaches facilitating the interaction between customers and developers, easing the code generation based on design phase, and improving the application maintenance.   2. Hypermedia models and object-oriented design and development techniques Hypermedia models as Dexter Hypermedia Model [Halasz and Schwartz 94], Amsterdam Hypermedia Model [Hardman et al. 94], Hypertext Abstract Machine HAM [Campbell and Goodman 88], Hypergraph Model [Tompa 89], Trellis Model [Stotts and Furuta 89], and Hypertext Design Model HDM [Garzotto et al. 93] present important advantages [Garzotto et al. 93], and a few drawbacks. They are closed systems, making it impossible (or very difficult) to include complex computational activities in the hypermedia application, if the model doesn't support this activity; some of them are too hard to be managed by non computer science people; and none of them enables the design of an hypermedia application centred on the information structure, with a real independence of the presentation structure. Object-oriented software development methodologies, as Booch [Booch 94] or UML [Rumbaugh et al. 98], are extensively and successfully applied in computer projects development, because they improve software quality and maintenance, but these methodologies also present some drawbacks. They are not primarily intended for the development of hypermedia applications; and they use diagrams which are valuable for software designers, but very difficult to be understood by a customer team. Our approach combines ideas for both domains, and integrates them through the use of XML. XML, the Extensible Markup Language [W3C XML], is the evolution of the first attempt to represent markup languages in a standardized way, SGML, the Standard Generalized Markup Language [ISO/IEC SGML]. XML is based on descriptive markup (the tag semantic is not specified in the tag definition); the separation between the structure, content and treatment of a document; and the platform independence. To achieve these goals XML defines the set of tags that conform to the markup language (that is the document structure) through an XML construction called DTD (Document Type Definition). This DTD is the grammar that formally describes the structure of a class of text, and a document that includes the DTD tags to structure its content is called an instance of the DTD.   3. Our approach As previously stated, our methodology tries to solve the problems identified in previous approaches, improving the communication between customers and developers. In our approach, developers are divided into software designers that must provide a representation of the application (code independent), and programmers that translate this representation into real code. Customers also play a double role. They are the content providers that organize the knowledge included in the application (this knowledge has a double structure: natural and hyperlink structure), and they are the interaction designers who decide the time and space of content presentation. Interaction between the content providers team and the software designers team is one of the problems that our methodology solves. We use an XML DTD, called the content DTD, to represent the contents of the application, and the hyperlinks between these contents. The content provider team describes the structure of the contents (using natural language), and the software designers team use this information to build the content DTD. Then, the content provider team generates an instance of this content DTD that organizes the contents of hypermedia application in a formal way. The use of meaningful tags, and the inclusion of attributes (properties) in these tags, solves the problem of content providers and software designers interaction.  Our methodology also eases the communication problems between the interaction designers team and software designer team. We use another XML DTD, called the presentation DTD to characterize the presentational structure of hypermedia applications. The elements of the presentation DTD describe the application presentational elements (screens, windows, buttons, etc.) and the hyperlinks between them. This DTD is common to all (or most) hypermedias, and is provided by the software designers team. Moreover we are working in the assignment of a concrete semantic to the presentation DTD, based on an object-oriented windows class hierarchy, to provide a consistent connection between the markup view, and the object-oriented view of our methodology. This separation from content and presentation provides the means to associate different presentations with the same content. The relationship between content DTD and presentation DTD is accomplished through the overmarkup. Overmarkup basic idea is a very simple one: when we build the instance of the presentation DTD, to describe the presentation and interaction framework of the application, the elements of the content DTD are the content of the elements of the presentation DTD.  We apply this overmarkup in two phases. In phase 1, structural overmarkup, there are no real contents, and when the interaction designers (helped by software designers) build the instance 1 of the presentation DTD, the elements of the presentation DTD overmark the elements (only the name of the element) of the content DTD, enabling a better understanding of the structure of the application. In phase 2, content overmarkup, when the interaction designers (helped by software designers) build the instance 2 of the presentation DTD, the elements of the presentation DTD overmark the instances of the elements of the content DTD (the real content) to represent the final hypermedia application. If we need to represent some complex computational activity in the application (for example an exercise that evaluates the learner knowledge) we use object-oriented diagrams (mainly class and state transition diagrams) that are attached to instance 2 of the presentation DTD. This instance 2 is what we call the application design document, and provides a real representation of the total application used by customers and programmers. Customers (content providers and interaction designers) use the design document to evaluate if it conforms to its requirements, and make any change (obviously they ignore the object-oriented diagrams). Programmers use part of this document in the coding phase directly, whereas other parts represent the application design that they must translate in real code. This task is facilitated by the relation between presentation DTD and real object-oriented code, and facilitates the maintenance of the final application.   4. Conclusions and future work We think that our approach provides a solution for the development of hypermedia applications, solving the problems of hypermedia models and object-oriented construction techniques. Indeed our solution is not closed (we have integrated all the power provided by object-oriented development techniques), and is specifically created to deal with hypermedia software. Our experience in the Galatea development has showed us that XML markup (and its supporting tools) is easy enough to be used by customers (a similar approach is used in [Nanard and Nanard 95]), and the design phase is totally covered by overmarkup. Content and presentation DTD improve the communication between customers and developers, and provide the means to capture the content and presentation structure in different stages. Overmarkup phases integrate these structures: structural overmarkup represents a fast application \"prototype\", and the design document is a complete application representation that solves the interaction problem between customers and software designers. Moreover we can use the structure provided by the presentation DTD to generate part of the object-oriented code (improving the communication between software designers and programmers), and the existence of the design document facilitates the application maintenance. Present work includes the total assignment of an object-oriented semantic to elements of presentation-DTD. The next step is the development of a CASE tool that facilitates the overmarkup process, and that provides different views of the application (overmarkup view, window view - an application preview - and object-oriented view).   ", "article_title": "Integration of Markup Languages and Object-Oriented Techniques in a Hypermedia Methodology", "authors": [{"given": "Antonio", "family": "Navarro", "affiliation": [{"original_name": " Universidad Complutense de Madrid, Spain  ", "normalized_name": "Complutense University of Madrid", "country": "Spain", "identifiers": {"ror": "https://ror.org/02p0gd045", "GRID": "grid.4795.f"}}]}, {"given": "Alfredo", "family": "Fernandez-Valmayor", "affiliation": [{"original_name": " Universidad Complutense de Madrid, Spain  ", "normalized_name": "Complutense University of Madrid", "country": "Spain", "identifiers": {"ror": "https://ror.org/02p0gd045", "GRID": "grid.4795.f"}}]}, {"given": "Baltasar", "family": "Fernandez-Manjon", "affiliation": [{"original_name": " Universidad Complutense de Madrid, Spain  ", "normalized_name": "Complutense University of Madrid", "country": "Spain", "identifiers": {"ror": "https://ror.org/02p0gd045", "GRID": "grid.4795.f"}}]}, {"given": "Jose", "family": "Sierra", "affiliation": [{"original_name": " Universidad Complutense de Madrid, Spain  ", "normalized_name": "Complutense University of Madrid", "country": "Spain", "identifiers": {"ror": "https://ror.org/02p0gd045", "GRID": "grid.4795.f"}}]}], "publisher": " University of Glasgow ", "date": "2000", "keywords": ["Text Encoding"], "journal_title": "ADHO Conference Abstracts", "volume": null, "issue": null, "ISSN": [{"value": null, "type": null}]}