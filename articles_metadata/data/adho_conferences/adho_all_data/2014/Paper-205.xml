<?xml version="1.0" encoding="utf-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:x="http://www.w3.org/1999/xhtml" xmlns:exsl="http://exslt.org/common" xml:id="Paper-205">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>XML-Print.  Typesetting arbitrary XML documents in high quality</title>
        <author>
          <name>
            <surname>Georgieff</surname>, <forename>Lukas</forename>
          </name>
          <affiliation>UAS Worms</affiliation>
          <email>lukas.georgieff@hotmail.com</email>
        </author>
        <author>
          <name>
            <surname>Küster</surname>, <forename>Marc Wilhelm</forename>
          </name>
          <affiliation>UAS Worms</affiliation>
          <email>kuester@fh-worms.de</email>
        </author>
        <author>
          <name>
            <surname>Selig</surname>, <forename>Thomas</forename>
          </name>
          <affiliation>UAS Worms</affiliation>
          <email>selig@fh-worms.de</email>
        </author>
        <author>
          <name>
            <surname>Sievers</surname>, <forename>Martin</forename>
          </name>
          <affiliation>University of Trier</affiliation>
          <email>sievers@uni-trier.de</email>
        </author>
      </titleStmt>
      <publicationStmt>
        <authority/>
        <publisher>EPFL, Switzerland</publisher>
        <distributor>
          <name>EPFL Digital Humanities Laboratory</name>
          <address>
            <addrLine>GC D2 386</addrLine>
            <addrLine>Station 18</addrLine>
            <addrLine>CH-1015 Lausanne</addrLine>
            <addrLine>frederic.kaplan@epfl.ch</addrLine>
          </address>
        </distributor>
        <pubPlace>Lausanne, Switzerland</pubPlace>
        <address>
          <addrLine>EPFL</addrLine>
          <addrLine>CH-1015 Lausanne</addrLine>
        </address>
        <availability>
          <p/>
        </availability>
      </publicationStmt>
      <notesStmt>
        <note type="abstract">Also in the age of electronic publishing print publications often remain the points of reference. Paper remains the principal scholarly format accepted in many circles and in spite of all activities on long-term digital archiving, it remains a central medium to disseminate and conserve patrimonial content over the decades and centuries. However, how can you combine an XML-based workflow with the need to publish high-quality, multilingual print output respecting the often arcane typesetting requirements of scholarly texts in humanities publishing and notably in the realm of critical editions? This is the starting point of the DFG-funded XML-Print, an Open Source project that tackles the typesetting requirements for multilingual critical editions while offering a user-friendly frontend.</note>
      </notesStmt>
      <sourceDesc>
        <p>No source: created in electronic format.</p>
        <p>
          <date when="20140709"/>
          <time when="11:00:00"/>
        </p>
		<p n="session">2</p>
		<p n="room">321 - Amphipôle</p>
      </sourceDesc>
    </fileDesc>
    <profileDesc>
      <textClass>
        <keywords scheme="original" n="category">
          <term>Paper</term>
        </keywords>
        <keywords scheme="original" n="subcategory">
          <term>Long Paper</term>
        </keywords>
        <keywords scheme="original" n="keywords"/>
        <keywords scheme="original" n="topic"/>
      </textClass>
    </profileDesc>
  </teiHeader>
  <text type="paper">
    <front>
      
      <div>
        <p></p>
        <p></p>
        <p></p>
        <p></p>
      </div>
    </front>
    <body>
      <div>
        <head>Introduction/Motivation</head>
        <p>Also in the age of electronic publishing print publications often remain the points of reference. While many humanities' projects finally build on XML and in particular TEI <ref target="n1" rend="sup">1</ref> and embrace electronic publications, they still want or need to target print publications as one or even the main form of sharing the results of their scholarship with the community. Paper remains the principal scholarly format accepted in many circles and in spite of all activities on long-term digital archiving <ref target="n2" rend="sup">2</ref><ref target="n3" rend="sup">3</ref>, it remains a central medium to disseminate and conserve patrimonial content over the decades and centuries.However, how can you combine an XML-based workflow with the need to publish high-quality, multilingual print output respecting the often arcane typesetting requirements of scholarly texts in humanities publishing and notably in the realm of critical editions? While there are commercial <ref  target="n4" rend="sup">4</ref><ref target="n5" rend="sup">5</ref> and free <ref target="n6" rend="sup">6</ref> <ref target="n7" rend="sup">7</ref><ref target="n8" rend="sup">8</ref> products out there that can help for some parts of the job, they are too expensive or too difficult to use in most humanities projects. This was the starting point of the DFG-funded XML-Print, an Open Source project that tackles the typesetting requirements for multilingual critical editions while offering a user-friendly frontend.XML-Print has already been presented to the DH community in two well-received short papers <ref  target="n9" rend="sup">9</ref><ref target="n10" rend="sup">10</ref> on specific aspects of the project's progress and technical challenges. In this long paper we present the project’s overall results.</p>
        <head>Typesetting Features</head>
        <p>XML-Print consists of two components:</p>
        <list type="unordered">
          <item>an interactive graphical user interface (GUI) based on Eclipse, to define the rules for typesetting the XML texts in direct interaction with the source XML text</item>
          <item>a command-line typesetting engine, written from bottom up in F#, to actually transform the XML text into pdf for print </item>
        </list>
        <p>Normally scholars will interact with the GUI to map their XML structures on layout rules. The typesetting engine is then transparent to them. However, more automated workflows can integrate the engine directly. In section 5 we present examples for both scenarios. Beyond most standard typesetting functionalities of XSL-FO <ref  target="n11" rend="sup">11</ref><ref target="n12" rend="sup">12</ref> XML-Print supports in particular the following three requirements specific for publishing in humanities scholarship:</p>
        <head>Columns</head>
        <p>A page always consists of different rectangular regions to add header/footer, marginals and the main text. However, this main text is often not limited to a one-column layout, but rather flows in multiple columns. As XSL-FO lacks in this requirement, XSL-FO+ adds a special interface to set-up arbitrary complex column-layouts, even mixed on one page. Each column has its own width and writing direction (left-to-right vs. right-to-left) allowing even “exotic” layouts to be applied within XML-Print.</p>
        <head>Cross references</head>
        <p>When using cross-references we must use placeholders, not only in the main text, but also for the header and footer of a page, where page number and sectioning information are commonly used, and for apparatus’ entries, where typographic information like referenced line numbers can change during the editorial process.</p>
        <figure>
          <graphic url="DH2014_171_1_mit_Aussenrahmen"/>
          <p>Fig. 1: Two user-defined reference systems for an edition</p>
        </figure>
        <p>XML-Print incorporates a concept of “reference fields” to define structural and typographic elements to be counted. This way the user can even combine these two types, e.g. for having a global line count and a local one being reset at a specific XML structure. In addition the corresponding “title” of an reference field can as well be made available.</p>
        <head>Apparatuses</head>
        <p>Based on reference fields users can define “referencing schemas” to be used in apparatuses. Predefined typographic elements like a global page, column and line numbering can be combined with user-defined fields, arbitrary fixed strings and special characters, e.g. a non-breakable space.As the concrete output of the schema might depend on previous apparatus’ entries, exceptions with regard to repeated items, e.g. same chapter, can be formulated as well.</p>
        <head>General Architecture and Technologies</head>
        <head>Standards</head>
        <p>Modern functional programming languages reusing established frameworks and libraries allow to build a high-quality, multilingual typesetting engine generating archiving-ready PDF/A-1 <ref target="n13" rend="sup">13</ref>  much faster than even a decade ago. With a comparatively small development team we have been able to meet the project’s major objectives within the funding period.</p>
        <p> XML-Print builds on Open Standards, especially on XML as the input language, XSL-FO to express formatting and XSLT to transform data from XML to XSL-FO. The project has extended XSL-FO to cover features such as apparatus and advanced referencing not currently supported by the specification (XSL-FO+).For the typesetting engine the project uses the .NET functional language F# <ref target="n14" rend="sup">14</ref>, running on the cross-platform Open Source .NET implementation mono. To handle OpenType <ref target="n15" rend="sup">15</ref> fonts and generate pdf we have settled on the Open Source library iText <ref target="n16" rend="sup">16</ref> that exists for both .NET and Java. We contributed to the library's support for some of advanced OpenType features such as “real” small caps and aspects of bidirectional scripts.</p>
        <head>Algorithms</head>
        <p>A major advantage of functional programming languages is the lack of mutable variables and states. Algorithms are commonly more compact and easier to parallelize without mutable variables to share across multiple threads. The XML-Print backend for example parallelizes the parsing of certain XSL-FO elements and the rendering of chapters respectively page sequences. </p>
        <p> Initially the rendering module was mainly based on the iText library. Now we are replacing all iText algorithms by our self-developed algorithms. They are specialized on the requirements of XML-Print and so are more efficient and easier to extend. We also decided to develop an own line-breaking algorithm. Going beyond the algorithm by Knuth and Plass <ref target="n17" rend="sup">17</ref>, we take advantage of today’s hardware capacities.</p>
        <p> The line breaking algorithm creates a tree structure for all possible line combinations of an entire paragraph. The best path in this tree structure is calculated by taking several characteristics into account, e.g. interword spaces, hyphenations, etc. The final implementation will be parallelized and produce a tree structure with “cross-connected” nodes, i.e. nodes that represent identical paragraph sections are reduced and replaced by additional arcs, thus increasing the efficiency by avoiding redundant line combinations. Figure 1 illustrates the process of line breaking. Each node represents a possible line. The numbers at the arcs represent the processing order. Equal numbers on the same level mean a parallelized section. The bolded path represents the final paragraph, consisting of the nodes Line_1^2, Line_2^5, Line_3^2 and Line_4^4.</p>
        <figure>
          <graphic url="DH2014_171_line_breaking_algorithm"/>
          <p>Fig. 2: Line breaking algorithm</p>
        </figure>
        <head>Graphical User Interface</head>
        <p>XML-Print addresses beginners as well as expert users. For the latter the GUI has to offer enough details while the former should not be overwhelmed by too many information at first. To achieve this goal XML-Print categorizes functionality and provides a basic and an expert layer.</p>
        <figure>
          <graphic url="DH2014_171_XML-Print%20_003"/>
          <p>Fig. 3: GUI for XML-Print</p>
        </figure>
        <p>We face, however, one inherent problem. To guarantee a high-quality output the typesetting incorporates a rich repertoire of typesetting logic and features which the user expects to appear somewhere in the graphical user interface. It is not always possible to shield users from these inherent complexities, while mapping all possible options onto GUI elements.</p>
        <p>Apart from defining formats and declaring "mappings" between XML elements and corresponding formats, the GUI offers several possibilities to modify aspects of typesetting, from preprocessing the XML source to altering the PDF output format, from configuring the page size to influencing hyphenation.</p>
        <head>Use Case Examples</head>
        <head>Edition “Kurt Schwitters: Wie Kritik zu Kunst wird”</head>
        <p>During the starting phase of the XML-Print project, staff members of the editorial project “Kurt Schwitters: Wie Kritik zu Kunst wird” <ref target="n18" rend="sup">18</ref> already used recent version of the software to proofread their XML transcriptions. At a later stage, formats and mappings for critical and commentary apparatus were added.</p>
        <head>Dictionaries: The “Trierer Wörterbuchnetz”</head>
        <p>The “Deutsche Wörterbuch von Jacob und Wilhelm Grimm” is a digitized version of the leading German Dictionary with more than 300.000 entries stored as XML inside a database. The pdf is a byproduct, creating pdf files on the fly is the only effective approach. The XML-Print typesetting engine was wrapped via a simple webservice interface, allowing remote access. Decoupling typesetting engine and GUI improves on flexibility and scalability, as it adds the options of cluster-processing and batch processing to the standard interactive processing. </p>
        <head>Outlook</head>
        <p>To ensure the long-term viability of the project beyond the end of funding in May 2014 XML-Print integrates with TextGrid <ref target="n19" rend="sup">19</ref> to complement the current stand-alone mode. In parallel we build up a community on SourceForge http://sourceforge.net/projects/xml-print/, reaching even now more than 50 monthly downloads on average.Further development of XML-Print is also intimately linked to the needs of its customers, especially the critical editions using it, evolving in response to specific requirements.XML-Print is there to play a key role in creating, sharing and preserving our digital and non-digital textual cultural heritage and humanities digital resources on one of the most durable media yet known to humankind – paper.</p>
      </div>
    </body>
    <back>
      <div type="References">
        <listBibl>
          <bibl>1. <hi rend="bold">Burnard, Lou, and Syd Bauman.</hi> (2007). <hi rend="italic">TEI P5: Guidelines for Electronic Text Encoding and Interchange</hi>. Text Encoding Initiative.
          </bibl>
          <bibl>2. <hi rend="bold">Hedges, M, A Jordanous, S Dunn, C Roueche, Marc Wilhelm Küster, Thomas Selig, M Bittorf, and W Artes.</hi> (2012). <hi rend="italic">New Models for Collaborative Textual Scholarship.</hi> In 6th IEEE International Conference on Digital Ecosystems Technologies (DEST), 1–6. doi:10.1109/DEST.2012.6227933.
          </bibl>
          <bibl>3. <hi rend="bold">Neuroth, Heike.</hi> (2009). Nestor Handbuch.
          </bibl>
          <bibl>4. Global Publishing Solution. (2013). 3B2 (Aka APP, Arbortext Print Publisher). 2013 ed. Accessed November 29. <ref type="url" target="http://www.3b2.com/3b2/.">www.3b2.com/3b2/.</ref>
          </bibl>
          <bibl>5. Adobe- 2013. Desktop Publishing (DTP), Digital Publishing | Adobe InDesign CC, <ref type="url" target="http://www.adobe.com/lu_de/products/indesign.html">www.adobe.com/lu_de/products/indesign.html</ref>, accessed: 29-Oct-2013.
          </bibl>
          <bibl>6. <hi rend="bold">Knuth, D E.</hi> 1986. <hi rend="italic">The TEXbook (Computers &amp; Typesetting Volume a).</hi>
          </bibl>
          <bibl>7. <hi rend="bold">Apache Foundation</hi>. (2013). <hi rend="italic">Apache FOP - a Print Formatter Driven by XSL Formatting Objects and an Output Independent Formatter.</hi> Xmlgraphics.Apache.org. <ref type="url" target="http://xmlgraphics.apache.org/fop/.">xmlgraphics.apache.org/fop/.</ref>
          </bibl>
          <bibl>8. <hi rend="bold">Lamport, Leslie</hi>. (1986). <hi rend="italic">LaTeX: User's Guide &amp; Reference Manual.</hi> Addison-Wesley 1986.
          </bibl>
          <bibl>9. <hi rend="bold">Burch, Thomas, Martin Sievers, Marc Wilhelm Küster, Claudine Moulin, Roland Schwarz, and Yu Gan</hi>. (2012). <hi rend="italic">XML-Print: an Ergonomic Typesetting System for Complex Text Structures.</hi> In Abstracts of Digital Humanities 2012, 375–379. Hamburg. <ref type="url" target="http://www.dh2012.uni-hamburg.de/wp-content/uploads/2012/07/HamburgUP_dh2012_BoA.pdf.">www.dh2012.uni-hamburg.de/wp-content/uploads/2012/07/HamburgUP_dh2012_BoA.pdf.</ref>
          </bibl>
          <bibl>10. <hi rend="bold">Küster, Marc Wilhelm, Thomas Selig, Lukas Georgieff, Martin Sievers, and M Bittorf</hi>. (2013). <hi rend="italic">XML-Print: Addressing Challenges for Scholarly Typesetting.</hi> In Abstracts for Digital Humanities 2013, 269–272. Lincoln, NE. <ref type="url" target="http://dh2013.unl.edu/abstracts/files/downloads/DH2013_conference_abstracts_print.pdf.">dh2013.unl.edu/abstracts/files/downloads/DH2013_conference_abstracts_print.pdf.</ref>
          </bibl>
          <bibl>11. <hi rend="bold">Berglund, Anders</hi>, ed. (2006). <hi rend="italic">Extensible Stylesheet Language (XSL) Version 1.1.</hi> W3C. <ref type="url" target="http://www.w3.org/TR/2006/REC-xsl11-20061205/.">www.w3.org/TR/2006/REC-xsl11-20061205/.</ref>
          </bibl>
          <bibl>12. <hi rend="bold">Pawson, D.</hi> (2002). <hi rend="italic">XSL-FO: Making XML Look Good in Print.</hi>
          </bibl>
          <bibl>13. ISO, and ISO TC 171 SC 2. (2005). <hi rend="italic">ISO 19005-1:2005 Document Management -- Electronic Document File Format for Long-Term Preservation -- Part 1: Use of PDF 1.4 (PDF/a-1).</hi> 19005. 1st ed. ISO.
          </bibl>
          <bibl>14. <hi rend="bold">Smith, Chris</hi>. 82012). <hi rend="italic">Programming F# 3.0</hi>. 2nd ed. O'Reilly Media. <ref type="url" target="http://www.amazon.de/Programming-F-3-0-Chris-Smith/dp/1449320295.">www.amazon.de/Programming-F-3-0-Chris-Smith/dp/1449320295.</ref>
          </bibl>
          <bibl>
            15. <hi rend="bold">Microsoft, Adobe. 2009. “Microsoft Typography - OpenType Specification.” Microsoft.com. 21.09.2009. <ref type="url" target="http://www.microsoft.com/typography/otspec/default.htm.">www.microsoft.com/typography/otspec/default.htm.</ref> Accessed 2013-10-29.</hi></bibl>
          <bibl>16. <hi rend="bold">“iText Core | iText Software.” 2013. “iText Core | iText Software.” Itextpdf.com. <ref type="url" target="http://itextpdf.com/product/itext.">itextpdf.com/product/itext.</ref> Accessed: 2013-10-29.</hi></bibl>
          <bibl>17. Stanford University. <hi rend="bold">Computer Science Dept, D E Knuth, and M F Plass</hi>. (1980). Breaking Paragraphs Into Lines.
          </bibl>
          <bibl>18. <hi rend="bold">Kocher, Ursula, and Isabel Schultz</hi>. (2013). <hi rend="italic">Wie Kritik Zu Kunst Wird: Kurt Schwitters' Strategien Der Produktiven Rezeption.</hi> Avl.Uni-Wuppertal.De. <ref type="url" target="http://www.avl.uni-wuppertal.de/forschung/projekte/wie-kritik-zu-kunst-wird.html.">www.avl.uni-wuppertal.de/forschung/projekte/wie-kritik-zu-kunst-wird.html.</ref>
          </bibl>
          <bibl>19. <hi rend="bold">TextGrid Konsortium</hi>. (2010). <hi rend="italic">TextGrid: Über TextGrid.</hi> <ref type="url" target="http://www.textgrid.de/ueber-textgrid.html.">www.textgrid.de/ueber-textgrid.html.</ref>
          </bibl>
        </listBibl>
      </div>
    </back>
  </text>
</TEI>
