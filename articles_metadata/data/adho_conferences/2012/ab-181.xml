<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../schema/xmod_web.rnc" type="compact"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0"
     xmlns:xmt="http://www.cch.kcl.ac.uk/xmod/tei/1.0" 
     xml:id="ab-181">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>XML-Print: an Ergonomic Typesetting System for Complex Text Structures</title>
                <author>
                    <name>Sievers, Martin</name>
                    <affiliation>Trier Center for Digital Humanities (Kompetenzzentrum), Germany</affiliation>
                    <email>sievers@uni-trier.de</email>
                </author>
                <author>
                    <name>Burch, Thomas</name>
                    <affiliation>Trier Center for Digital Humanities (Kompetenzzentrum), Germany</affiliation>
                    <email>burch@uni-trier.de</email>
                </author>
                <author>
                    <name>Küster, Marc W.</name>
                    <affiliation>Worms University of Applied Sciences, Germany</affiliation>
                    <email>kuester@fh-worms.de</email>
                </author>
                <author>
                    <name>Moulin, Claudine</name>
                    <affiliation>Trier Center for Digital Humanities (Kompetenzzentrum), Germany</affiliation>
                    <email>moulin@uni-trier.de</email>
                </author>
                <author>
                    <name>Rapp, Andrea</name>
                    <affiliation>TU Darmstadt, Germany</affiliation>
                    <email>rapp@linglit.tu-darmstadt.de</email>
                </author>
                <author>
                    <name>Schwarz, Roland</name>
                    <affiliation>Worms University of Applied Sciences, Germany</affiliation>
                    <email>schwarzr@uni-trier.de</email>
                </author>
                <author>
                    <name>Gan, Yu</name>
                    <affiliation>Trier Center for Digital Humanities (Kompetenzzentrum), Germany</affiliation>
                    <email>gany2d01@uni-trier.de</email>
                </author>
            </titleStmt>
            <publicationStmt>
                <publisher>Jan Christoph Meister, Universität Hamburg</publisher>
                <address>
                   <addrLine>Von-Melle-Park 6, 20146 Hamburg, Tel. +4940 428 38 2972</addrLine>
                   <addrLine>www.dh2012.uni-hamburg.de</addrLine>
              </address>
            </publicationStmt>
            <sourceDesc>
                <p>No source: created in electronic format.</p>
            </sourceDesc>
        </fileDesc>
        <revisionDesc>
            <change>
                <date>2012-04-15</date>
                <name>DH</name>
                <desc>generate TEI-template with data from ConfTool-Export</desc>
            </change>
            <change>
                <date>2012-04-13</date>
                <name>LS</name>
                <desc>provide metadata for publicationStmt</desc>
            </change>
        </revisionDesc>
    </teiHeader>
    <text type="paper">
        <body>
            <div>
                <head>Introduction</head>
                <p>The software <hi rend="italic">XML-Print</hi> is used to typeset arbitrary XML
                    files. The joint research project is funded by the German Research Foundation
                    (DFG) for the period starting 1 March 2010 to 28 February 2014. It is a key
                    component of the TextGridLab, which has been under continuous development since
                    2008.<note>Version 1.0 of the TextGridLab was released in July 2011.</note></p>
                <p><hi rend="italic">XML-Print</hi> supports users in formatting their semantically
                    annotated data rule­based and in outputting a high-quality PDF document. Based
                    on existing standards like XSL (XSLT and XSL-FO), Unicode and OpenType, a modern
                    graphical user interface offers different kinds of layout options. Those are
                    then processed by a newly developed typesetting engine using the functional
                    programming language F#.</p>
              </div>
            
            <div>
                <head>Scholarly Typesetting</head>
                <p><hi rend="italic">XML-Print</hi> targets in particular specific challenges from
                    the typesetting of scholarly texts such as critical editions, multilingual
                    synoptic editions or scholarly dictionaries. </p>
                <p>Taking the example of critical editions as a key product of philological
                    research, they regular attempt to fully describing alternative existing
                    witnesses of the text (old manuscripts, early prints, etc.) and fully covering
                    the genesis of the text (authorial or scribal additions, deletions, comments,
                    etc.).</p>
                <p>Critical editions in print use specific layout conventions. The editor notes
                    witnesses in one apparatus and often adds their explanations in a critical
                    apparatus which constitutes a fourth ﬂow on the page. More complex layouts can
                    include more critical apparatus and/or annotations in margins. Other challenges
                    beyond the ‘normal’ typesetting tasks include in particular synoptic prints,
                    marginalia with complex references, unusual or non-standard characters and
                    symbols, including those not (yet) present in the Unicode specifications etc.</p>
            </div>
            
                <div>
                    <head>State of the Art</head>
                    <p>Many humanities scholars have started to encode their work as XML files. The TEI
                    guidelines have been a major contribution to that. However, when it comes to the
                    stage of publication often problems arise: What tool should be used for that?
                    There are of course well-known solutions: Open-source typesetting engines like
                    TeX (Knuth, 1986) and TUSTEP (Ott, 1979) can be ‘programmed’ to convert large
                    amounts of XML data somehow into their own markup language and then into an
                    output format, typically PDF. However both batch systems need an experienced and
                    skilled user in order to get high-quality results. Very often individual and
                    highly specialized extensions have to be added, in particular in view of the
                    challenges of non-standard typesetting requirements such as multiple apparatus.
                    In addition these systems suffer from the problem of content mixed up with
                    formatting information.</p>
                <p>Apart from batch systems many proprietary ‘WYSIWYG’ software came up through the
                    years, e.g. the Critical Edition Typesetter (CET) and the Classical Text Editor
                    (CTE). These are, however, mostly isolated solutions with data – once input and
                    annotated – ‘getting lost’ in a proprietary format. </p>
                <p>From the commercial ‘desktop publishing’ sector Adobe InDesign is a reasonable
                    choice using its own XML format as a medium step, but it lacks in the
                    implementation of scientific printing. The same is valid for office suites which
                    are not meant for high-quality typesetting of scientific content. </p>
                <p>More about the requirements of scientific typesetting and existing solutions can
                    be found in Küster and Ludwig (2008).</p>
                </div>
            
            <div>
            <head>Functionality</head>
                    <p>The following use case is a typical example for the publication of an XML file
                    using <hi rend="italic">XML-Print</hi>: A scholar has a critical edition encoded
                    in XML and wants to present a first printed version to their colleagues. In order
                    to do so they have to perform the following steps:</p>
                <xmt:uList>
                    <item>Identify different structures and think about corresponding ways of
                        formatting, e.g. for chapters, sections, footnotes, paragraphs etc. </item>
                    <item>Create a <hi rend="italic">format</hi> for each of the identified
                        structures. Set sizes, spaces, text decorations and other attributes as
                        needed. Modify the <hi rend="italic">standard format</hi> if
                        necessary.</item>
                    <item>Use the <hi rend="italic">mapping</hi> dialog to select pairs of XML
                        elements and <hi rend="italic">formats</hi>.</item>
                    <item>Start the integrated typesetting engine to get a PDF document.</item>
                    <item>If necessary, make changes to the XML source and/or alter formats and
                        mappings.</item>
                </xmt:uList>
                <p>Figure 1 illustrates the overall data ﬂow.</p>
              
                <p><figure>
                        <graphic url="img181-1.jpg" rend="left" height="256px" width="341px"
                            mimeType="image/jpeg"/>
                        <head>Figure 1: Data ﬂow in XML-Print: The user decides on the formatting
                            of an annotated XML text with the help of a GUI (front-end). Those
                            information are then merged into a XSL-FO+ file and converted into an
                            internal intermediate format for typesetting (back-end). At last the
                            renderer outputs a PDF file (or any other supported format)</head>
                    </figure></p>
  
  <div>
                <head>Graphical User Interface (GUI)</head>                
                <p>A user-friendly and modern GUI is essential for the acceptance by the ‘community’
                    (cf. Nielsen 1993; Warwick et al. 2011). To make integration into the toolbox of
                    the TextGridLab easier, the front-end has been implemented as an Eclipse plug-in
                    using the Rich Client Platform (RCP) technology. It offers ways to select
                    different layout options which are then incorporated into a dynamic XSLT
                    stylesheet to generate an <hi rend="italic">XSL-FO+</hi> file. This format is
                    based on the standard XSL-FO, but continuously extended where needed.<note>There
                        are many attributes intended for XSL-FO 2.0 (e.g. fo:marginalia) and other
                        structures not even specified there. We had to add attributes, e.g. for the
                        placement of footnote apparatus. See the requirements and the latest version
                        of the XSL-FO working draft for more examples.</note></p>
                <p>Figure 2 shows the user’s view on the <hi rend="italic">XML-Print</hi> GUI.</p>
      
      <p><figure>
                            <graphic url="img181-2.jpg" rend="left" height="256px" width="341px"
                                mimeType="image/jpeg"/>
                            <head>Figure 2: The user’s view on the GUI of XML-Print is
                                tripartite: On the left the XML tree can be expanded while the
                                formats are listed on the right. The middle part links those both
                                together by mappings</head>
                        </figure></p>
  
               
 <div>
                <p><hi rend="bold">Formats</hi></p>
                
                <p>Each <hi rend="italic">format</hi> is a set of <hi rend="italic">XSL-FO+</hi>
                    attributes. They determine the concrete rendering later on by the typesetting
                    engine. The attributes are divided into categories inspired by the XSL-FO
                    terminology (block, inline, footnote etc.) to easily navigate through. This idea
                    was derived from similar software familiar to many users. This way the user can
                    set all appropriate values as needed. </p>
                <p>New <hi rend="italic">formats</hi> can be created and existing ones may be
                    copied, edited or deleted. The complete set of <hi rend="italic">formats</hi>
                    can then be saved and transferred to another scholar or can be used for any
                    other <hi rend="italic">XML-Print</hi> project.</p>
     </div>

<div>
    <p><hi rend="bold">Mappings</hi></p>
                   
                <p>Each XML element can be <hi rend="italic">mapped</hi> to a <hi rend="italic"
                        >format</hi>. Different attribute values can be considered as well, e.g. to
                    distinguish &lt;note type="footnoteA"&gt; from &lt;note type="footnoteB"&gt;.
                    The selection of corresponding structures can be easily done directly on the XML
                    tree. Alternatively an arbitrary XPath expression can be used.</p>
                <p><hi rend="italic">Mappings</hi> can not only be created, edited and deleted, but
                    also deactivated for testing purposes. A rank order is also established to allow
                    the scholar to use overlapping <hi rend="italic">mappings</hi>, i.e. XML
                    structures belonging to more than one <hi rend="italic">mapping</hi>.</p>
     
</div>
  </div>      
      <div>
                <head>Typesetting Engine</head>
          <p>The disadvantages of existing approaches stated in section 3 led to the decision
                    for a completely new typesetting engine. Established algorithms like the one by
                    Knuth and Plass (1981) are combined with new ideas (cf. Brüggemann-Klein et al.
                    2003) and open-source libraries like Hunspell and iText are incorporated by a
                    functional approach using the programming language F# as part of the .NET
                    framework and its implementation both under Microsoft .NET and its open-source,
                    cross-platform counterpart Mono.</p>
                <p>Functional programming coexists with imperative programming for quite some
                        time<note>Lisp was the first functional-flavored language in the late 1950s.
                        Modern examples apart from F# are Scala, Haskell and XSLT.</note>, but was
                    often considered to be too ‘academic’. This has, however, changed over the last
                    years not least because of some important advantages arising from the different
                    approach on modern multicore systems that are available everywhere: no side
                    effects, better evaluation techniques and strong abilities for modularization
                    and parallelism (see e.g. Hughes 1990).</p>
                <p>Of course, all essential features of recent typesetting engines are to be
                    implemented, i.e. good line and page breaking, support of OpenType fonts,
                    ﬂoating objects, tables, lists etc. For the underlying access to OpenType fonts
                    and PDF generation we leverage existing cross-platform, open-source libraries
                    such as iTeXtSharp. The main focus, however, has been on those algorithms which
                    substantially improve the quality compared to existing programs. Thus we have
                    already implemented an interface to typeset an arbitrary number of footnotes and
                    apparatus. Other important and requested features are multi-column layout,
                    especially parallel text, and marginals.</p>
                <p>The resulting program can be run stand-alone (batch mode) or integrated in the
                    Eclipse plug-in. A Web service will be offered as well. </p>
                <p>Figure 3 shows an example of an <hi rend="italic">XML-Print</hi> output.</p>
          
          <p><figure>
                            <graphic url="img181-3.jpg" rend="left" height="256px" width="341px"
                                mimeType="image/jpeg"/></figure></p>
          <p><figure>
              <graphic url="img181-4.jpg" rend="left" height="256px" width="341px"
                  mimeType="image/jpeg"/>
              <head>Figure 3: Resulting output of the typesetting engine: Apart
                  from paragraph handling and the use of different fonts the two
                  different types of ‘notes’ (&lt;note type="footnoteA"> &lt;note
                  type="footnoteB">)are both set as footnotes. They are sorted and
                  numbered automatically according to their corresponding
                  format</head>
          </figure></p>
      </div>
            </div>    
            
            <div>
                <head>Further Enhancement </head>      
                <p><hi rend="italic">XML-Print</hi> has been released as an alpha version and is
                    tested by researchers of different projects, e.g. for a volume of selected
                    letters of Kurt Schwitters (cf. project’s web site, 2011 and figure 3). The
                    typesetting engine as well as the GUI are continuously enhanced, taking into
                    account new user requirements. By extending the attributes for formatting and
                    user-friendly ways, e.g. to generate registers, tables or the type area, <hi
                        rend="italic">XML-Print</hi> will offer more and more features to
                    researchers. The development process continues bipartite: On the one hand the
                    support of all standard XSL-FO elements and basic typesetting functionality has
                    to be completed and maybe adapted to a new specification or other output formats,
                    on the other hand advanced algorithms for more complex problems will be
                    developed and implemented.</p>
                
                <p>Within the next months the following tasks will be targeted:</p>
                <xmt:uList>
                    <item>Continuous work on typographic requirements based on ‘real life examples’</item>
                    <item>Integration of the open-source tool xindy for indexes</item>
                    <item>Implementation of more output formats, especially PDF variants like PDF-X and PDF-A</item>
                    <item>Development of a preview mode to allow faster response to minor changes</item>
                </xmt:uList>
                
                <p>With the integration into TextGridLab another large group of new users will get
                    in touch with the software and help to improve it.</p>
                
        </div>
        

        
        </body>
        <back><div>
            <head>References</head>
            
                <p><hi rend="bold">Brüggemann-Klein, A., R. Klein, and S. Wohlfeil</hi> (2003). On
                    the Pagination of Complex Documents. In R. Klein, H. Six and L. Wegner (eds.),
                        <hi rend="italic">Computer Science in Perspective</hi>. Berlin and
                    Heidelberg: Springer, pp. 49-68. </p>
            <p><hi rend="bold">Hughes, J. (1990</hi>). Why Functional Programming Matters. In D.
                    Turner D. (ed.), <hi rend="italic">Research Topics in Functional
                        Programming</hi>. Reading: Addison-Wesley, pp. 17-42. <ref target="http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf" type="external">http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf</ref>
                     (accessed 13 March 2012). First published 1989: 10.1093/comjnl/32.2.98</p>
                <p><hi rend="bold">Knuth, D. E.</hi> (1986). <hi rend="italic">The TeXbook</hi>.
                    Reading: Addison-Wesley. </p>
                <p><hi rend="bold">Knuth, D. E., and M. F. Plass</hi> (1981). Breaking paragraphs
                    into lines, <hi rend="italic">Journal Software: Practice and Experience
                    </hi>1111: 1119–1184.</p>
                <p><hi rend="bold">Küster, M. W., and C. Ludwig</hi> (2007). <hi rend="italic"
                        >Publishing.</hi>
                    <ref
                        target="http://www.textgrid.de/fileadmin/TextGrid/reports/TextGrid-R1_4_Publishing.pdf"
                        type="external"
                        >http://www.textgrid.de/fileadmin/TextGrid/reports/TextGrid-R1_4_Publishing.pdf</ref>
                    (accessed 13 March 2012).</p>
                <p><hi rend="bold">Nielsen, J.</hi> (1993). <hi rend="italic">Usability
                        Engineering</hi>. London: Academic Press.</p>
                <p><hi rend="bold">Ott, W.</hi> (1979). A Text Processing System for the Preparation
                    of Critical Editions. <hi rend="italic">Computers and the Humanities</hi> 13(1):
                    29–35. </p>
            <p><hi rend="bold">Warwick, C., M. Terras, P. Huntington, N. Pappa, and I. Galina
                    </hi>(2006). <hi rend="italic">The LAIRAH Project. Log Analysis of Digital
                        Resources in the Arts and Humanities.</hi>
                    <ref
                        target="http://www.ucl.ac.uk/infostudies/claire-warwick/publications/LAIRAHreport.pdf"
                        type="external"
                        >http://www.ucl.ac.uk/infostudies/claire-warwick/publications/LAIRAHreport.pdf</ref>
                    (accessed 13 March 2012).</p>
            <p><hi rend="bold">Wie Kritik zur Kunst wird</hi>. Project web site, <ref
                        target="http://www.avl.uni-wuppertal.de/forschung/projekte/wie-kritik-zu-kunst-wird.html"
                        type="external"
                        >http://www.avl.uni-wuppertal.de/forschung/projekte/wie-kritik-zu-kunst-wird.html</ref>
                    (accessed 13 March 2012).</p>
        </div>
            
            
        </back>
    </text>
</TEI>