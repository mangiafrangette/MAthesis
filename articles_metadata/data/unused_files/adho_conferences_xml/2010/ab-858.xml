<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../schema/xmod_web.rnc" type="compact"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xmt="http://www.cch.kcl.ac.uk/xmod/tei/1.0" xml:id="ab-858">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>From Codework to Working Code: A Programmer's Approach to Digital Literacy</title>
                <author>
                    <name>Bork, John</name>
                    <affiliation><orgName>University of Central Florida</orgName> <reg><country>USA</country></reg></affiliation>
                    <email>jrbork@wcnet.org</email>
                </author>
                </titleStmt>
            <publicationStmt>
                <publisher>Centre for Computing in the Humanities, King's College London</publisher>
                <address>
                    <addrLine>Strand, London WC2R 2LS, England, United Kingdom. Tel:+44 (0) 20 7836 5454</addrLine>
                    <addrLine>http://www.kcl.ac.uk/cch/</addrLine>
                </address>
            </publicationStmt>
            <sourceDesc>
                <p>No source: created in electronic format.</p>
            </sourceDesc>
        </fileDesc>
        <revisionDesc>
            <change>
                <date>2010-04-22</date>
                <name>CD</name>
                <desc>CCHLite encoding</desc>
            </change>
        </revisionDesc>
    </teiHeader>
    <text type="paper"> 
        <body>
            <div>
                <p>What does it mean to be digitally literate?  Obviously it entails a basic familiarity with commonly used technologies, so that one may navigate the technological life world that has permeated nearly every aspect of the human one. One aspect of this knowledge is the recognition of computer languages, communications protocols, syntactic forms, passages of program code, and command line arguments, even when they have been taken out of their operational context for use as literary and rhetorical devices.  In addition to the infiltration of the abbreviated language of email and text messaging into mainstream print media, it is now also commonplace to encounter programming keywords, symbols, operators, indentation, and pagination entwined with natural, non-technical, mother tongue expressions.  <hi rend="italic">Codework</hi> is the term associated with the literary and rhetorical practice of mixing human and computer languages (<ref type="internal" cRef="bibl4">Hayles, 2004</ref>; <ref type="internal" cRef="bibl8">Raley, 2002</ref>; <ref type="internal" cRef="bibl1">Cramer, 2008</ref>).  Types of codework span from intentionally arranged constructions intended for human consumption that do not execute on any real computer system, to valid expressions in bona fide programming languages that are meaningful to both human and machine readers.  Examples of the former include the work of Mez (Mary-Anne Breeze) and Talon Memmott, of the latter, the work of John Cayley and Grahan Harwood (<ref type="internal" cRef="bibl8">Raley, 2002</ref>; <ref type="internal" cRef="bibl3">Fuller, 2008</ref>).  Rita Raley notes, however, that of the popular electronic literature of the early twenty first century, there is “less code per se than the language of code.” In addition to its infusion for literary effect, program source code may be cited in scholarly texts like conventional citations to explain a point in an argument.  Although it is more common to encounter screen shots of user interfaces, examples of working source code appear on occasion in humanities scholarship.  This study will briefly consider why working code has been largely shunned in most academic discourse, and then identify the types and uses of bone fide code that do appear, or are beginning to appear, in humanities scholarship.  Its goal is to suggest ways in which working code – understood both as code that <hi rend="italic">works</hi>, and as the practice of <hi rend="italic">working</hi> code – plays a crucial role in facilitating digital literacy among social critics and humanities scholars, and demonstrate through a number of examples how this effect may be achieved.</p>
                <p>The first argument in favor of studying computer code in the context of humanities scholarship can be drawn from N. Katherine Hayles' methodological tool of Media-Specific Analysis (MSA).  Probing the differences between electronic and print media when considering the same term, such as hypertext, requires comprehension of the precise vocabulary of the electronic technologies involved.  A second, more obvious argument comes from the growing disciplines of Software Studies and Critical Code Studies.  If critical analysis of software systems is to reveal implicit social and cultural features, reading and writing program code must be a basic requirement of the discipline (<ref type="internal" cRef="bibl3">Fuller, 2008</ref>; <ref type="internal" cRef="bibl7">Mateas, 2005</ref>; <ref type="internal" cRef="bibl9">Wardrip-Fruin, 2009</ref>).  As the media theorist Friedrich Kittler points out, the very concept of what code is has undergone radical transformations from its early use by Roman emperors as cipher to a generic tag for the languages of machines and technological systems in general; “technology puts code into the practice of realities, that is to say: it encodes the world” (<ref type="internal" cRef="bibl6">Kittler, 2008</ref>).  Or, following the title of Lev Manovich's new, downloadable book, software takes command.  Yet both Kittler and Manovich express ambivalence towards actually examining program code in scholarly work.  A third argument, which will form the focus of this study, is reached by considering the phenomenon of <hi rend="italic">technological</hi> concretization within computer systems and individual software applications.  According to Andrew Feenberg, this term, articulated by Gilbert Simondon, describes the way “technology evolves through such elegant condensations aimed at achieving functional compatibilities” by designing products so that each part serves multiple purposes simultaneously (<ref type="internal" cRef="bibl2">Feenberg, 1999</ref>).  The problem is that, from the perspective of a mature technology, every design decision appears to have been made from neutral principles of efficiency and optimization, whereas historical studies reveal the interests and aspirations of multiple groups of actors intersecting in design decisions, so that the evolution of a product appears much more contingent and influenced by vested interests.  The long history of such concretizations can be viewed like the variegated sedimentation in geological formations, so that, with careful study, the outline of a technological unconscious can be recovered.  The hope is that, through discovering these concealed features of technological design, the the unequal distribution of power among social groups can be remedied.  Feenberg's project of democratic rationalization responds to the implicit oppression of excluded groups and values in technological systems by mobilizing workers, consumers, and volunteers to make small inroads into the bureaucratic, industrial, corporate decision making.</p>
                <p>For computer technology in particular, digital literacy is the critical skill for connecting humanities studies as an input to democratic rationalizations as an output.  Working code replaces the psychoanalytic session for probing the technological unconscious to offer tactics for freeing the convention-bound knowledge worker and high tech consumer alike.  Many theorists have already identified the free, open source software (FOSS) community as an active site for both in depth software studies and for rich examples of democratic rationalizations (<ref type="internal" cRef="bibl3">Fuller, 2008</ref>; <ref type="internal" cRef="bibl10">Yuill, 2008</ref>; <ref type="internal" cRef="bibl5">Jesiek, 2003</ref>).  Simon Yuill in particular elaborates the importance of revision control software for capturing and cataloging the history of changes in software projects.  As as corollary to this point, it can be argued that concealed within these iterations of source code are the concretizations that make up the current, polished version of the program that is distributed for consumption by the end users, and from which the technological unconscious may be interpreted.  However, even when they are freely available to peruse in public, web-accessible repositories, these histories are only visible to those who can understand the programming languages in which they are written.  Therefore, it is imperative that humanities scholars who wish to critically examine computer technology for its social and cultural underpinnings include working code - as practicing programming - in their digital literacy curricula.</p>
            </div>
            </body>
        <back>
            <div>
                <listBibl>
                    <bibl xml:id="bibl1">
                        <author>Cramer, Florian</author><date>2008</date> <title level="a">Language</title> <editor>Fuller, Mattew</editor> <title level="m">Software Studies: A Lexicon</title> <pubPlace>Cambridge, Mass</pubPlace><publisher>The MIT Press</publisher> <biblScope type="pp">168-74</biblScope></bibl>
                        
                        <bibl xml:id="bibl2"><author>Feenberg, Andrew</author><date>1999</date> <title level="m">Questioning Technology</title> <pubPlace>New York</pubPlace> <publisher>Routledge</publisher></bibl>
                        
                        <bibl xml:id="bibl3"><author>Fuller, Matthew</author><date>2008</date> <title level="a">Introduction</title> <editor>Fuller, Mattew</editor>  <title level="m">Software Studies: A Lexicon</title> <pubPlace>Cambridge, Mass</pubPlace> <publisher>The MIT Press</publisher> <biblScope type="pp">1-13</biblScope></bibl>
                        
                        <bibl xml:id="bibl4"><author>Hayles, N. Katherine</author> <date>2004</date> <title level="a">Print is flat, code is deep: the importance of media-specific analysis</title> <title level="j">Poetics Today</title> <biblScope type="issue">25(1)</biblScope> <biblScope type="pp">67-90</biblScope></bibl>
                        
                        <bibl xml:id="bibl5"><author>Jesiek, Brent K.</author> <date>2003</date> <title level="a">Democratizing Software: Open Source, the Hacker Ethic, and Beyond</title> <title level="j">First Monday</title> <biblScope type="issue">8(10)</biblScope> <date type="visited">5 October 2008</date></bibl>
                        
                        <bibl xml:id="bibl6"><author>Kittler, Friedrich</author>. <date>2008</date> <title level="a">Code</title>. <editor>Fuller, Mattew</editor> <title level="m">Software Studies: A Lexicon</title> <pubPlace>Cambridge, Mass</pubPlace> <publisher>The MIT Press</publisher> <biblScope type="pp">40-7</biblScope></bibl>
                        
                        <bibl xml:id="bibl7"><author>Mateas, Michael</author> <date>2005</date> <title level="a">Procedural literacy: educating the new media practitioner</title> <title level="j">On The Horizon. Special Issue. Future of Games, Simulations and Interactive Media in Learning Contexts</title> <biblScope type="issue">13(1)</biblScope> <date type="visited">21 October 2009</date></bibl>
                        
                        <bibl xml:id="bibl8"><author>Raley, Rita</author> <date>2002</date> <title level="a">Interferences: [Net.Writing] and the practice of codework</title> <title level="j">Electronic Book Review</title> <date>8 September 2002</date> <date type="visited">7 October 2009</date></bibl>
                        
                        <bibl xml:id="bibl9"><author>Wardrip-Fruin, Noah</author> <date>2009</date> <title level="m">Expressive Processing: Digital Fictions, Computer Games, and Software Studies</title> <pubPlace>Cambridge, MA</pubPlace> <publisher>The MIT Press</publisher></bibl>
                        
                        <bibl xml:id="bibl10"><author>Yuill, Simon</author> <date>2008</date> <title level="a">Concurrent version system</title> <editor>Fuller, Mattew</editor> <title level="m">Software Studies: A Lexicon</title> <pubPlace>Cambridge, Mass</pubPlace> <publisher>The MIT Press</publisher> <biblScope type="pp">64-9</biblScope>
                    </bibl>
                </listBibl>
            </div>
        </back>
    </text>
</TEI>
