<?xml version="1.0" encoding="UTF-8"?>

<?oxygen RNGSchema="http://digitalhumanities.unl.edu/resources/schemas/tei/TEIP5.3.0.0/tei_all.rng" type="xml"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:id="ab-295">
    
<teiHeader>
<fileDesc>
<titleStmt>
<title>Voyant Notebooks: Literate Programming and Programming Literacy</title>
<author>
<name><surname>Sinclair</surname>, <forename>Stéfan</forename></name>
<affiliation>McGill University, Canada</affiliation>
<email>sgsinclair@gmail.com</email>
</author>
<author>
<name><surname>Rockwell</surname>, <forename>Geoffrey</forename></name>
<affiliation>University of Alberta, Canada</affiliation>
<email>grockwel@ualberta.ca</email>
</author>
</titleStmt>
<publicationStmt>
<authority></authority>
<publisher>University of Nebraska-Lincoln</publisher>
<distributor>
<name>Center for Digital Research in the Humanities</name>
<address>
<addrLine>319 Love Library</addrLine>
<addrLine>University of Nebraska&#8211;Lincoln</addrLine>
<addrLine>Lincoln, NE 68588-4100</addrLine>
<addrLine>cdrh@unlnotes.unl.edu</addrLine>
</address>
</distributor>
<pubPlace>Lincoln, Nebraska</pubPlace> 
<address>
<addrLine>University of Nebraska-Lincoln</addrLine>
<addrLine>Lincoln, NE 68588-4100</addrLine>
</address>
<availability>
<p></p>
</availability>
</publicationStmt>
            
            
<notesStmt><note type="abstract">This poster will introduce Voyant Notebooks, a web-based literate programming environment designed for the digital humanities. There is already a working prototype and we anticipate having a more feature-rich version available by July 2013. Our poster will have two parts, a) a usable demonstration on one or more laptops and b) a poster that illustrates how Voyant Notebooks implements Knuth’s concept of literate programming. In addition to these conceptual aspects, the poster will outline technical details about the Voyant Notebooks prototype for those interested, including the technologies used for both client-side (browser) and server-side components.</note></notesStmt>
            
<sourceDesc>
<p>No source: created in electronic format.</p>
</sourceDesc>
</fileDesc>
        
<profileDesc>
<textClass>
<keywords scheme="original" n="category">
<term>Poster</term>
</keywords>
<keywords scheme="original" n="subcategory">
<term></term>
</keywords>
<keywords scheme="original" n="keywords">
<term>text analysis</term>
<term>literate computing</term>
<term>Voyant</term>
</keywords>
                
<keywords scheme="original" n="topic">
<term>text analysis</term>
                 
</keywords>
</textClass>
</profileDesc>
        
<revisionDesc>
<change>
<date when="2013-03-29"></date>
<name>Erin Pedigo</name>
<desc>Initial encoding</desc>
</change>
</revisionDesc>
</teiHeader>
    
<text type="paper">
<body>
<div>
    
    <p>Some thirty years ago Donald Knuth, a computer scientist, proposed literate programming
as a better way of organizing narrative and code (1984). Knuth argued that more emphasis
should be placed on explaining to humans what computers are meant to do, rather than simply
instructing computers what to do. Knuth was especially interested in weaving together macrostyle
code snippets with prose that provided a larger narrative context, not merely functional
comments of specific lines of code that are the distilled remnants of an intellectual process.</p>
    <p>Literate programming has been more influential in theory than in practice (N&#248;rmark), despite
several utilities and environments including Mathematica, Knuth's (C)WEB, Sweave for R, and
Marginalia for Clojure. Perhaps the exigencies of programming in the real world correspond
poorly with the vision of Knuth of the programmer as author: "the practitioner of literate
programming can be regarded as an essayist, whose main concern is with exposition and
excellence of style" (1992, 1). However, that balance of essayist and coder strikes us as
perfectly appropriate for the digital humanities, a natural blend of the expression of intellectual
process with the exposition of technical methodologies. The prose can gloss the code, or viceversa,
in a symbiotic relationship that serves to strengthen an argument and demonstrate its
own workings.</p>
    <p>One of the most significant potential benefits of the literate programming paradigm is
pedagogical: these works can both explain an interpretive insight and present the methodology
for reproducing the data or results that were part of the process. Many widely-read digital
humanities blogs already present these characteristics of exploration, explanation, interpretation
and step-by-step instructions (see for example blogs by Ted Underwood, Benjamin Schmidt,
Lisa Rhody and Scott Weingart). Literate programming can be more self-contained and more
useful for those learning new methodologies and new programming techniques. This is about
the principles of literate programming, but also about the potential for increasing programming
literacy.</p>
    <p>This poster will introduce Voyant Notebooks, a web-based literate programming environment
designed for the digital humanities (see Appendix A). There is already a working prototype and
we anticipate having a more feature-rich version available by July 2013. Voyant Notebooks
inherits many of the characteristics of the Voyant Tools environment, including a concern for
usability and flexibility (researchers and students should be able to use it with minimal or no
training and with their own texts of interest). Voyant Notebooks also addresses one of the main
weaknesses of Voyant Tools: the fact that most tools are constrained by assumptions about
how they would be most commonly used. For instance, the Wordle-like (word cloud) Cirrus tool
is designed to show the top frequency terms from a corpus or document; but what if the user
instead wants to visualize the top frequency nouns, or people, or repeating phrases? All of that
functionality could be built into the tool, but possibly at the cost of usability (endless menus and
options), and it could still never address all of the possible use cases. Voyant Notebooks, by
contrast, empowers the user to customize some of the functionality by leveraging the analytic
capabilities of the Voyant back-end and the visualization interfaces in the front-end (like Cirrus).
Our poster will have two parts, a) a usable demonstration on one or more laptops and
b) a poster that illustrates how Voyant Notebooks implements Knuth’s concept of literate
programming. In addition to these conceptual aspects, the poster will outline technical details
about the Voyant Notebooks prototype for those interested, including the technologies used for
both client-side (browser) and server-side components. Some of the technical challenges that
will be described include:

    <list type="simple">
        
        <item>managing the flow of code execution in an asynchronous architecture,</item>
        
        <item>using web workers to avoid browser freezes during longer executions,</item>
        
        <item>mitigating the security risks of user-defined and persistent Javascript code,</item>
        
        <item>code variable scoping across editor instances and window components,</item>
        
        <item>embedding of Voyant tool panels (visualizations) and other services,</item>
        
        <item>developing a flexible API for different programming levels and styles,</item>
        
        <item>developing an API that includes both client-side and server-side operations, and</item>
        
        <item>ensuring efficiency of repeated code snippets during writing and viewing.</item></list>
        
And of course, visitors to the poster session will be warmly encouraged to play with Voyant
Notebooks.</p>        
</div>
    
<div>
<head>Appendix A: Mockup of Voyant Notebooks (previously called Voyeur Notebooks).</head>    
</div>    
    
<div>   
<figure><graphic url="ab-295.001"/><head>Figure 1:</head><p> Mockup of Voyant Notebooks</p></figure>
</div>     

    
</body>
    
<back>
<div type="References">
<listBibl>
    
<bibl><hi rend="bold">Knuth, D.</hi> (1984). Literate Programming. <hi rend="italic">The Computer Journal</hi> 27(2): 97-111, 1.</bibl>
    
<bibl><hi rend="bold">Knuth, D.</hi> (1992). <hi rend="italic">Literate Programming.</hi> Stanford University Center for the Study of Language
and Information.</bibl>
    
<bibl><hi rend="bold">N&#248;rmark, K.</hi> (1998). Literate Programming: Issues and Problems.
<ref type="url" target="http://www.cs.aau.dk/~normark/litpro/issues-and-problems.html">http://www.cs.aau.dk/~normark/litpro/issues-and-problems.html</ref>.</bibl>
    
<bibl><hi rend="bold">Sinclair, S. and G. Rockwell</hi> (2012). Teaching Computer-Assisted Text Analysis:
Approaches to Learning New Methodologies. in <hi rend="italic">Digital Humanities Pedagogy.</hi> Open Book Publishers.</bibl>
    
</listBibl>
</div>
</back>
</text>
</TEI>
