In this, part two of a two part paper, we will discuss our approach to the formalisation of our document encoding approach, derived from software engineering, which treats of the three classes of a digital edition; the Logical, the Physical and the Interaction Classes. We specifically address our decision to use XML (Extensible Mark-up Language), not TEI (Text Encoding Initiative), as our encoding language. An argument is provided as to why TEI is unsuitable for function-based documents, this addresses both source integrity and the restrictive nature of TEI. TEI does not support our forward engineering approach, which allows us to simultaneously produce the model, the encoding and the software environment.